name: integration-test
on: [push, workflow_dispatch] #workflow_dispatch: Allows you to run this workflow manually from the Actions tab
jobs:
  integration-test-python:
    name: "Run Integration Tests for Python"
    runs-on: ubuntu-latest
    environment: test
    env:
      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}

      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}

      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_PASSPHRASE: ${{ secrets.SNOWFLAKE_PASSPHRASE }}
      SNOWFLAKE_CONNECTIONS_SNOWCONNECTION_RSAKEY: ${{ secrets.SNOWFLAKE_RSAKEY }}

      SNOWFLAKE_DATABASE_PROD: ${{ vars.SNOWFLAKE_DATABASE_PROD }}
      SNOWFLAKE_SCHEMA_PROD: ${{ vars.SNOWFLAKE_SCHEMA_PROD }}
    steps:
      # Mount github repo
      - name: Mount github repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set stochastic environment variables to create a transient environment clone
        run: |
          SNOWFLAKE_DATABASE="SNOWFLAKE_ML_PLATFORM_TEST_$(uuidgen | tr '[:lower:]' '[:upper:]' | head -c 8)"
          echo "SNOWFLAKE_DATABASE=$SNOWFLAKE_DATABASE" >> $GITHUB_ENV
          SNOWFLAKE_SCHEMA="SNOWFLAKE_ML_PLATFORM_TEST_$(date +%Y%m%d%H%M%S)_$(uuidgen | tr '[:lower:]' '[:upper:]' | head -c 8)"
          echo "SNOWFLAKE_SCHEMA=$SNOWFLAKE_SCHEMA" >> $GITHUB_ENV

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          architecture: x64

      - name: Install python dependencies (including this repo itself)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install --no-deps -e .

      - name: Install snowflake cli
        uses: Snowflake-Labs/snowflake-cli-action@v1
        with:
          cli-version: "latest"
          default-config-file-path: "./.github/workflows/config.toml"

      - name: Decrypt and save private key
        run: |
          echo "${{ secrets.SNOWFLAKE_RSAKEY }}" > encrypted_private_key.pem
          openssl rsa -in encrypted_private_key.pem -out private_key.pem -passin pass:${{ secrets.SNOWFLAKE_PASSPHRASE }}

      - name: Clone snowflake production schema
        env:
          SNOWFLAKE_PRIVATE_KEY_PATH: private_key.pem
        run: |
          export SNOWFLAKE_CONNECTIONS_SNOWFLAKE_PRIVATE_KEY_PATH=$SNOWFLAKE_PRIVATE_KEY_PATH
          export SNOWFLAKE_CONNECTIONS_SNOWFLAKE_AUTHENTICATOR=SNOWFLAKE_JWT
          snow configure set --authenticator SNOWFLAKE_JWT --private-key-path $SNOWFLAKE_PRIVATE_KEY_PATH
          snow sql --private-key-path $SNOWSQL_PRIVATE_KEY_PATH --authenticator SNOWFLAKE_JWT -q "CREATE DATABASE $SNOWFLAKE_DATABASE; DROP SCHEMA PUBLIC;"
          snow sql --private-key-path $SNOWSQL_PRIVATE_KEY_PATH --authenticator SNOWFLAKE_JWT -q "CREATE SCHEMA $SNOWFLAKE_DATABASE.$SNOWFLAKE_SCHEMA CLONE $SNOWFLAKE_DATABASE_PROD.$SNOWFLAKE_SCHEMA_PROD;"
          python ./migrations/models/clone_models.py --prod_database $SNOWFLAKE_DATABASE_PROD --prod_schema $SNOWFLAKE_SCHEMA_PROD
    
      - name: Apply changes to snowflake features store, datasets, and model registry
        run: |
          python ./migrations/features/apply_features.py --mode test
          python ./migrations/datasets/apply_datasets.py
          python ./migrations/models/apply_models.py

      - name: Apply changes to snowflake apps
        run: |
          cd ./migrations/apps/warehouse
          snow snowpark build
          snow snowpark deploy --replace

      - name: Run python integration tests
        run: |
          pytest -m integration

      - name: Clean up private key
        run: |
          rm private_key.pem encrypted_private_key.pem
